#!/usr/bin/env bash
# description:  config for the wrapper
# author:       archie2016

WORKON_HOME=/D/04.Projects/virtualenv

VIRTUALENVWRAPPER_PROJECT_FILENAME=/Lib/site-packages/virtualenv_path_extensions.pth
export WORKON_HOME=`dirname $WORKON_HOME/FILE`
export VIRTUALENVWRAPPER_PROJECT_FILENAME=$VIRTUALENVWRAPPER_PROJECT_FILENAME
#!/usr/bin/env bash
# description:  show env and switch env
# author:       archie2016

# if WORKON_HOME is not exist
[ -z "$WORKON_HOME" ]  && {
    WORKON_HOME=$HOME/Envs
}

workon() {
    [ $# -eq 0 ] && {
        echo
        echo Pass a name to activate one of the following virtualenvs:
        echo ==============================================================================
        ls -1 $WORKON_HOME
        return 0
    }

    local VENV=$1
    local CHANGEDIR=0
    shift
    while [ $# -ne 0 ]; do
        [ "$1" = "-c" ] && CHANGEDIR=1
        shift
    done

    # create WORKON_HOME folder
    [ -d "$WORKON_HOME" ] || {
        mkdir $WORKON_HOME
    }

    # VENV not exist
    [ -d "$WORKON_HOME/$VENV" ] || {
        echo
        echo "virtualenv $VENV does not exist"
        echo "Create it with \"mkvirtualenv $VENV\""
        return 0
    }

    # activate script is not exist
    [ -f "$WORKON_HOME/$VENV/Scripts/activate" ] || {
        echo
        echo "$WORKON_HOME/$VENV"
        echo "does\'t contain a virtualenv ^(yet^)"
        echo "Create it with \"mkvirtualenv $VENV\""
        return 0
    }

    # activate env
    source $WORKON_HOME/$VENV/Scripts/activate

    # goto project
    if [ -f "$WORKON_HOME/$VENV/$VIRTUALENVWRAPPER_PROJECT_FILENAME" ]; then
        # cdproject
        :
    elif [ $CHANGEDIR -eq 1 ]; then
        cd $WORKON_HOME/$VENV
    fi
}
#!/usr/bin/env bash
# description:  set project directory
# author:       archie2016

_venv_usage_setprojectdir() {
    echo
    echo "Pass in a full or relative path to the project directory"
    echo "If the directory doesn\'t exist, it will be created"
    echo
}

setprojectdir() {
    [ -z "$WORKON_HOME" ] && {
        cd "$USERPROFILE"
        cd $OLDPWD
        WORKON_HOME="$OLDPWD/Envs"
    }

    [ -z "$VIRTUALENVWRAPPER_PROJECT_FILENAME" ] && {
        VIRTUALENVWRAPPER_PROJECT_FILENAME=.project
    }

    [ -z "$VIRTUAL_ENV" ] && {
        echo
        echo "A virtualenv must be activated"
        _venv_usage_setprojectdir
        return 0
    }

    local prodir=$1

    [ -d "$prodir" ] || {
        echo
        echo "Project dir is not exist"
        return 1
    }

    if [ "$prodir" = "." ]; then
        prodir=`pwd`
    else
        cd $prodir
        cd $OLDPWD
        prodir="$OLDPWD"
    fi

    echo
    echo "$prodir is now the project directory for"
    echo "virtualenv $VIRTUAL_ENV"
    add2virtualenv "$prodir"
    return 0
}
#!/usr/bin/env bash
# description:  goto refered project directory
# author:       archie2016

_venv_usage_cdproject() {
    echo
    echo "switches to the project dir of the activated virtualenv"
    echo
}

cdproject() {
    [ -z "$VIRTUAL_ENV" ] && {
        echo
        echo "a virtualenv must be activated"
        return 0
    }

    [ -z "$VIRTUALENVWRAPPER_PROJECT_FILENAME" ] && {
        VIRTUALENVWRAPPER_PROJECT_FILENAME=.project
    }

    [ -f "$VIRTUAL_ENV/$VIRTUALENVWRAPPER_PROJECT_FILENAME" ] || {
        echo
        echo "No project directory found for current virtualenv"
        return 1
    }

    _LAST_DIR=$(pwd)
    cd $(cat "$VIRTUAL_ENV/$VIRTUALENVWRAPPER_PROJECT_FILENAME")
    return 0
}
#!/usr/bin/env bash
# description:  got top virtualenv directory
# author:       archie2016

cdvirtualenv() {
    [ -n "$PYTHONHOME" ] && {
        cd $PYTHONHOME
        return 0
    }

    [ -n "$VIRTUAL_ENV" ] && {
        cd $VIRTUAL_ENV
        return 0
    }

    cd "$(python -c 'import sys;print(sys.exec_prefix)')"
}
#!/usr/bin/env bash
# description:  set project directory
# author:       archie2016

_venv_usage_add2virtualenv() {
    echo
    echo "Pass in a full or relative path of a directory to be added"
    echo "to the current virtualenv or non-virtualenv pythonpath."
    echo "If the directory doesn't exist, it will be created."
}

add2virtualenv() {
    # add2
    if [ -z "$PYTHONHOME" ]; then
        PYHOME=$PYTHONHOME
    elif [ -z "$VIRTUAL_ENV" ]; then
        PYHOME=$VIRTUAL_ENV
    else
        cd "$(python -c 'import sys;print(sys.exec_prefix)')"
        cd $OLDPWD
        PYHOME=$OLDPWD
    fi

    # main
    local prodir="$1"
    echo "$prodir" > $VIRTUAL_ENV$VIRTUALENVWRAPPER_PROJECT_FILENAME
    echo
    echo "$prodir added to"
    echo "$VIRTUAL_ENV$VIRTUALENVWRAPPER_PROJECT_FILENAME"
}

#!/usr/bin/env bash
# description:  create virtualenv
# author:       archie2016

# if WORKON_HOME is not exist
[ -z "$WORKON_HOME" ]  && {
    WORKON_HOME=$HOME/Envs
}

_venv_usage_mkvirtualenv() {
    echo
    echo "Pass a name to create a new virtualenv"
    echo
}

mkvirtualenv() {
    local CURRPWD=`pwd`
    # deactivate current virtualenv
    [ -n "$VIRTUAL_ENV" ] && deactivate

    # set PYHOME(local) base PYTHONHOME (if exist) or python location
    local PYHOME="$PYTHONHOME"
    [ -z "$PYHOME" ] && PYHOME=`python.exe -c "import sys;print(sys.exec_prefix)"`

    # make sure WORKON_HOME exist
    [ ! -d "$WORKON_HOME" ] && mkdir -p "$WORKON_HOME"

    # get user input virtualenv name
    local ENVNAME=""
    for ENVNAME in $@; do
        [ -n "$(echo $ENVNAME | egrep '^\w+$')" ] && break
    done

    # verify virtualenv name valid. (not a exist folder)
    [ -z "$ENVNAME" -o -d "$WORKON_HOME/$ENVNAME" ] && {
        echo
        echo "virtualenv name $ENVNAME is invalid"
        return 0
    }

    # create virtualenv, if create failed, goto end
    cd "$WORKON_HOME"
    if [ -e "$PYHOME/Scripts/virtualenv-script.py" ]; then
        # need to be modify to push all the arguments
        python "$PYHOME/Scripts/virtualenv-script.py" $@
    else
        virtualenv.exe $@
    fi
    cd "$CURRPWD"
}

#!/usr/bin/env bash
# description:  show env and switch env
# author:       archie2016

# if WORKON_HOME is not exist
[ -z "$WORKON_HOME" ]  && {
    WORKON_HOME=$HOME/Envs
}

_venv_usage_rmvirtualenv() {
    echo
    echo "Pass a name to remove a virtualenv"
    echo
}

rmvirtualenv() {
    local CURRPWD=`pwd`
    # if WORKON_HOME is not exist
    [ -z "$WORKON_HOME" ]  && {
        WORKON_HOME=$HOME/Envs
    }

    # deactivate specified virenv, since it is current active virtualenv
    [ -n "$VIRTUAL_ENV" -a "$VIRTUAL_ENV" = "$WORKON_HOME/$1" ]  && \
        deactivate

    # specified virtualenv exist
    [ ! -d "$WORKON_HOME/$1" ] && {
        echo
        echo "virtualenv $1 doesn\'t exist"
        return 0
    }

    # remove the virtualenv
    cdvirtualenv && cd ..
    rm -rf $1
    [ -e "$CURRPWD" ] && cd "$CURRPWD"
}
